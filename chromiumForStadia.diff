diff --git a/chrome/android/java/AndroidManifest.xml b/chrome/android/java/AndroidManifest.xml
index 853ec785e2fe..67630c54ec30 100644
--- a/chrome/android/java/AndroidManifest.xml
+++ b/chrome/android/java/AndroidManifest.xml
@@ -17,6 +17,7 @@ by a child template that "extends" this file.
     <!-- android:versionCode and android:versionName is set through gyp. See build/common.gypi -->
 
     <uses-feature android:glEsVersion="0x00020000" />
+    <uses-feature android:name="android.software.leanback" android:required="false" />
 
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
@@ -127,6 +128,7 @@ by a child template that "extends" this file.
          Java heap limit (32Mb on Nexus S, 48Mb on Xoom). -->
     <application android:name="{% block application_name %}org.chromium.chrome.browser.ChromeApplication{% endblock %}"
         android:icon="@drawable/ic_launcher"
+        android:banner="@drawable/ic_launcher"
         android:roundIcon="@drawable/ic_launcher_round"
         android:label="{% block application_label %}@string/app_name{% endblock %}"
         android:largeHeap="false"
@@ -213,6 +215,7 @@ by a child template that "extends" this file.
             android:exported="true">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LEANBACK_LAUNCHER" />
                 <category android:name="android.intent.category.NOTIFICATION_PREFERENCES" />
                 {% if enable_vr == "true" %}
                 <category android:name="com.google.intent.category.DAYDREAM" />
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/fullscreen/FullscreenHtmlApiHandler.java b/chrome/android/java/src/org/chromium/chrome/browser/fullscreen/FullscreenHtmlApiHandler.java
index 274d82704979..9f2956e25f39 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/fullscreen/FullscreenHtmlApiHandler.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/fullscreen/FullscreenHtmlApiHandler.java
@@ -395,8 +395,8 @@ public class FullscreenHtmlApiHandler {
      * @return fullscreen flags to be applied to system UI visibility.
      */
     private int applyEnterFullscreenUIFlags(int systemUiVisibility) {
-        boolean showNavigationBar =
-                mFullscreenOptions != null ? mFullscreenOptions.showNavigationBar() : false;
+        boolean showNavigationBar = false;
+                //mFullscreenOptions != null ? mFullscreenOptions.showNavigationBar() : false;
         int flags = SYSTEM_UI_FLAG_FULLSCREEN;
         flags |= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
         if (!showNavigationBar) {
diff --git a/device/gamepad/gamepad_platform_data_fetcher_android.cc b/device/gamepad/gamepad_platform_data_fetcher_android.cc
index 38a6cb45240d..29f971b78497 100644
--- a/device/gamepad/gamepad_platform_data_fetcher_android.cc
+++ b/device/gamepad/gamepad_platform_data_fetcher_android.cc
@@ -98,7 +98,7 @@ static void JNI_GamepadList_SetGamepadData(
     base::android::ConvertJavaStringToUTF16(env, devicename, &gamepad_id);
     pad.SetID(gamepad_id);
 
-    pad.mapping = mapping ? GamepadMapping::kStandard : GamepadMapping::kNone;
+    pad.mapping = GamepadMapping::kStandard;
   }
 
   pad.connected = true;
diff --git a/third_party/blink/renderer/core/dom/document_or_shadow_root.h b/third_party/blink/renderer/core/dom/document_or_shadow_root.h
index cfed2ae42a7f..23f184e010f1 100644
--- a/third_party/blink/renderer/core/dom/document_or_shadow_root.h
+++ b/third_party/blink/renderer/core/dom/document_or_shadow_root.h
@@ -72,6 +72,8 @@ class DocumentOrShadowRoot {
 
   static Element* pointerLockElement(Document& document) {
     UseCounter::Count(document, WebFeature::kDocumentPointerLockElement);
+    return Fullscreen::FullscreenElementForBindingFrom(document);
+    /*
     const Element* target = document.PointerLockElement();
     if (!target)
       return nullptr;
@@ -85,6 +87,7 @@ class DocumentOrShadowRoot {
       return const_cast<Element*>(target);
     }
     return document.AdjustedElement(*target);
+    */
   }
 
   static Element* pointerLockElement(ShadowRoot& shadow_root) {
